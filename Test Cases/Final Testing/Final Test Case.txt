#Testing ADDI
addi x2, x1, -2
addi x2, x2, 10

#Testing load and store
addi x1, x0, 1
sb x1, 0(x0)
sll x1, x1, 8
sb x1, 1(x0)
sh x1, 2(x0)
sll x1, x1, 8
sh x1, 4(x0)
sw x1, 6(x0)

lb x2, 0(x0)
lb x3, 1(x0)
lh x2, 2(x0)
lh x3, 4(x0)
lw x3, 6(x0)

#Testing negatives
addi x1, x0, -1
sw x1, 10(x0)
lb x2, 10(x0)
lbu x3, 10(x0)
lh x4, 10(x0)
lhu x4, 10(x0)

//////////////////////////////////////////////////////////////////

# Testing LUI
lui x1, 1
lui x1, -1

#Testing AUIPC
auipc x2, 2

#Testing JAL
jal x2, test_jal

#Testing BEQ
beq x2, x0, fail //False case
beq x2, x2, beq_correct
ecall

beq_correct:
#Testing BNE
bne x2, x2, fail
bne x2, x0, bne_correct
ecall

bne_correct:
#Testing BLT & BLTU without negatives
blt x2, x0, fail
blt x0, x0, fail
bltu x2, x0, fail
bltu x0, x0, fail
blt x0, x2, blt_correct
ecall

blt_correct:
bltu x0, x2, bltu_correct
ecall

bltu_correct:
#Testing with negative
addi x1, x0, -1
bltu x1, x0, fail
blt x1, x0, blt_signed_correct
ecall

blt_signed_correct:
#Testing BGE & BGEU without negatives
bge x0, x2, fail
bgeu x0, x2, fail
bge x2, x0, bge_c
ecall

bge_c:
#Checking bgeu
bgeu x2, x0, bgeu_c
ecall

bgeu_c:
#Testing with negative
bgeu x0, x1, fail
bge x0, x1, bge_s_c
ecall

bge_s_c:
#Testing with equal
bge x0, x0, bge_e_c
ecall

bge_e_c:
bgeu x0, x0, bgeu_e_c
ecall

bgeu_e_c:

#Testing slti & sltui
addi x1, x0, -1
slti x3, x1, 1
sltui x4, x1, 1
slti x3, x4, 2
sltui x4, x4, 2

#Testing slt and sltu
slt x5, x1, x3
sltu x6, x1, x3
slt x5, x3, x1
sltu x6, x3, x1


#Testing xori, andi, ori
addi x2, x0, 2
ori x3, x2, 1
xori x4, x3, 6
andi x5, x3, 6 

#Testing slli, srli, and srai
addi x1, x0, 5
slli x2, x1, 2
srli x3, x2, 2
srai x4, x2, 2
addi x5, x0, -8
srai x3, x5, 1
srl x6, x5, 1

#Testing sll, srl, and sra
addi x1, x0, 1
addi x2, x0, 2
sll x3, x2, x1
sra x4, x3, x1
sra x6, x5, x1
srl x7, x5, x1

#Testing add and sub
addi x1, x0, 5
addi x2, x0, -5
add x3, x1, x2
add x4, x1, x1
sub x5, x1, x2
sub x6, x2, x1
sub x7, x2, x2
sub x8, x1, x1

#Testing xor, or & and
addi x1, x0, 1
addi x2, x0, 2
ori x3, x2, 1
addi x6, x0, 6
xori x4, x3, x6
andi x5, x3, x6

ebreak 

test_jal:
#Testing JALR
jalr x2, 0(x2)

fail:
ecall